diff --git a/dist/eslint-utils/context.js b/dist/eslint-utils/context.js
index f8f9c3b9c4341106522c884ecee96ec06f0a57e6..cd96792a09f546d15cca02e9ca38516f3db654a9 100644
--- a/dist/eslint-utils/context.js
+++ b/dist/eslint-utils/context.js
@@ -1,13 +1,12 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.getSourceCode = exports.getScope = exports.getFilename = exports.getDeclaredVariables = exports.getCwd = exports.getAncestors = void 0;
-function getAncestors(context) {
-    // TODO: Use `SourceCode#getAncestors` (we'll be forced to soon)
-    return context.getAncestors();
+function getAncestors(context, node) {
+    return context.sourceCode.getAncestors(node);
 }
 exports.getAncestors = getAncestors;
 function getCwd(context) {
-    return context.cwd ?? context.getCwd();
+    return context.cwd;
 }
 exports.getCwd = getCwd;
 function getDeclaredVariables(context, node) {
@@ -17,16 +16,15 @@ function getDeclaredVariables(context, node) {
 }
 exports.getDeclaredVariables = getDeclaredVariables;
 function getFilename(context) {
-    return context.filename ?? context.getFilename();
+    return context.filename;
 }
 exports.getFilename = getFilename;
-function getScope(context) {
-    // TODO: Use `SourceCode#getScope` (we'll be forced to soon)
-    return context.getScope();
+function getScope(context, node) {
+    return context.sourceCode.getScope(node);
 }
 exports.getScope = getScope;
 function getSourceCode(context) {
-    return context.sourceCode ?? context.getSourceCode();
+    return context.sourceCode;
 }
 exports.getSourceCode = getSourceCode;
 //# sourceMappingURL=context.js.map
\ No newline at end of file
diff --git a/dist/eslint-utils/getParserServices.js b/dist/eslint-utils/getParserServices.js
index 77a4f75b13a059951afe9dc5c4e0c375bb048774..eada5fb41a14d0cacb9d3ff7a23727b19ab89b03 100644
--- a/dist/eslint-utils/getParserServices.js
+++ b/dist/eslint-utils/getParserServices.js
@@ -15,21 +15,21 @@ function getParserServices(context, allowWithoutFullTypeInformation = false) {
     // error message explaining the problem.
     if (
     // eslint-disable-next-line deprecation/deprecation -- TODO - support for ESLint v9 with backwards-compatible support for ESLint v8
-    context.parserServices?.esTreeNodeToTSNodeMap == null ||
+    context.sourceCode.parserServices?.esTreeNodeToTSNodeMap == null ||
         // eslint-disable-next-line deprecation/deprecation, @typescript-eslint/no-unnecessary-condition -- TODO - support for ESLint v9 with backwards-compatible support for ESLint v8
-        context.parserServices.tsNodeToESTreeNodeMap == null) {
+        context.sourceCode.parserServices.tsNodeToESTreeNodeMap == null) {
         throw new Error(ERROR_MESSAGE);
     }
     // if a rule requires full type information, then hard fail if it doesn't exist
     // this forces the user to supply parserOptions.project
     if (
     // eslint-disable-next-line deprecation/deprecation -- TODO - support for ESLint v9 with backwards-compatible support for ESLint v8
-    context.parserServices.program == null &&
+    context.sourceCode.parserServices.program == null &&
         !allowWithoutFullTypeInformation) {
         throw new Error(ERROR_MESSAGE);
     }
     // eslint-disable-next-line deprecation/deprecation -- TODO - support for ESLint v9 with backwards-compatible support for ESLint v8
-    return context.parserServices;
+    return context.sourceCode.parserServices;
 }
 exports.getParserServices = getParserServices;
 //# sourceMappingURL=getParserServices.js.map
\ No newline at end of file
