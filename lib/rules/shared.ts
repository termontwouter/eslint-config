import type { Linter } from 'eslint';

const js: Linter.RulesRecord = {
  'brace-style': [ 'error', '1tbs', { allowSingleLine: false }],
  'comma-spacing': [ 'error', { before: false, after: true }],
  'default-param-last': [ 'error' ],
  'dot-notation': [ 'error', { allowKeywords: true }],
  'func-call-spacing': [ 'error', 'never' ],
  indent: [ 'error', 2, {
    SwitchCase: 1,
    VariableDeclarator: { var: 2, let: 2, const: 3 },

    outerIIFEBody: 1,
    MemberExpression: 1,
    FunctionDeclaration: { parameters: 1, body: 1 },
    FunctionExpression: { parameters: 1, body: 1 },
    CallExpression: { arguments: 1 },
    ArrayExpression: 1,
    ObjectExpression: 1,
    ImportDeclaration: 1,
    flatTernaryExpressions: false,
    ignoredNodes: [
      'JSXAttribute',
      'JSXClosingElement',
      'JSXClosingFragment',
      'JSXElement',
      'JSXElement > *',
      'JSXEmptyExpression',
      'JSXExpressionContainer',
      'JSXFragment',
      'JSXIdentifier',
      'JSXMemberExpression',
      'JSXNamespacedName',
      'JSXOpeningElement',
      'JSXOpeningFragment',
      'JSXSpreadAttribute',
      'JSXSpreadChild',
      'JSXText',
    ],
    ignoreComments: false,
  }],
  'keyword-spacing': [ 'error', { before: true, after: true }],
  'lines-between-class-members': [ 'error', 'always', {
    exceptAfterSingleLine: false,
  }],
  'no-array-constructor': [ 'error' ],
  'no-dupe-class-members': [ 'error' ],
  'no-empty-function': [ 'error', { allow: []}],
  'no-extra-parens': [ 'error', 'all', {
    conditionalAssign: false,
    enforceForArrowConditionals: false,

    ignoreJSX: 'all',
    nestedBinaryExpressions: false,
    returnAssign: false,
  }],
  'no-extra-semi': [ 'error' ],
  'no-loop-func': [ 'error' ],
  'no-loss-of-precision': [ 'error' ],
  'no-magic-numbers': [ 'error' ],
  'no-shadow': [ 'error', { builtinGlobals: false, hoist: 'functions', allow: []}],
  'no-unused-vars': [ 'error', {
    args: 'after-used',
    caughtErrors: 'all',
    vars: 'all',
    ignoreRestSiblings: false,
  }],
  'no-use-before-define': [ 'error', {
    functions: true,
    classes: true,
    variables: true,
  }],
  'no-useless-constructor': [ 'error' ],
  'object-curly-spacing': [ 'error', 'always', { objectsInObjects: false, arraysInObjects: false }],
  'require-await': 'off',
  semi: [ 'error', 'always', { omitLastInOneLineBlock: false }],
  'space-before-function-paren': [ 'error', 'always' ],
  'space-infix-ops': [ 'error', { int32Hint: false }],
};

const ts: Linter.RulesRecord = {
  '@typescript-eslint/brace-style': [ 'error', '1tbs', { allowSingleLine: false }],
  '@typescript-eslint/comma-spacing': [ 'error' ],
  '@typescript-eslint/default-param-last': [ 'error' ],
  '@typescript-eslint/dot-notation': [ 'error', {
    allowKeywords: true,
    allowPrivateClassPropertyAccess: false,
  }],
  '@typescript-eslint/func-call-spacing': [ 'error', 'never' ],
  '@typescript-eslint/indent': [ 'error', 2, {
    SwitchCase: 1,
    VariableDeclarator: { var: 2, let: 2, const: 3 },

    outerIIFEBody: 1,
    MemberExpression: 1,
    FunctionDeclaration: { parameters: 1, body: 1 },
    FunctionExpression: { parameters: 1, body: 1 },
    CallExpression: { arguments: 1 },
    ArrayExpression: 1,
    ObjectExpression: 1,
    ImportDeclaration: 1,
    flatTernaryExpressions: false,
    ignoredNodes: [ 'error' ],
    ignoreComments: false,
  }],
  '@typescript-eslint/keyword-spacing': [ 'error', { before: true, after: true }],
  '@typescript-eslint/lines-between-class-members': [ 'error', 'always', {
    exceptAfterOverload: false,
  }],
  '@typescript-eslint/no-array-constructor': [ 'error' ],
  '@typescript-eslint/no-dupe-class-members': [ 'error' ],
  '@typescript-eslint/no-empty-function': [ 'error' ],
  '@typescript-eslint/no-extra-parens': [ 'error', 'all', {
    conditionalAssign: false,
    enforceForArrowConditionals: false,

    ignoreJSX: 'all',
    nestedBinaryExpressions: false,
    returnAssign: false,
  }],
  '@typescript-eslint/no-extra-semi': [ 'error' ],
  '@typescript-eslint/no-loop-func': [ 'error' ],
  '@typescript-eslint/no-loss-of-precision': [ 'error' ],
  '@typescript-eslint/no-magic-numbers': 'off',
  '@typescript-eslint/no-shadow': [ 'error', { builtinGlobals: false, hoist: 'functions', allow: []}],
  '@typescript-eslint/no-unused-vars': [ 'error', { vars: 'all' }],
  '@typescript-eslint/no-use-before-define': [ 'error', {
    functions: true,
    classes: true,
    enums: true,
    variables: true,
    typedefs: true,
  }],
  '@typescript-eslint/no-useless-constructor': [ 'error' ],
  '@typescript-eslint/object-curly-spacing': [ 'error', 'always', { objectsInObjects: false, arraysInObjects: false }],
  '@typescript-eslint/require-await': 'off',
  '@typescript-eslint/semi': [ 'error', 'always', { omitLastInOneLineBlock: false }],
  '@typescript-eslint/space-before-function-paren': [ 'error' ],
  '@typescript-eslint/space-infix-ops': [ 'error', { int32Hint: false }],
};

export { js, ts };
