import type { Linter } from 'eslint';
import { js as shared } from './shared.js';

export const rules: Linter.RulesRecord = {
  ...shared,
  'accessor-pairs': [ 'error', { getWithoutSet: false, setWithoutGet: true, enforceForClassMembers: true }],
  'array-bracket-newline': 'off',
  'array-bracket-spacing': [ 'error', 'always',
    { singleValue: true, objectsInArrays: false, arraysInArrays: false },
  ],
  'array-callback-return': [ 'error', { allowImplicit: true }],
  'array-element-newline': 'off',
  'arrow-body-style': [ 'error', 'as-needed', { requireReturnForObjectLiteral: false }],
  'arrow-parens': [ 'error', 'as-needed', { requireForBlockBody: false }],
  'arrow-spacing': [ 'error', { before: true, after: true }],
  'block-scoped-var': [ 'error' ],
  'block-spacing': [ 'error', 'always' ],
  'callback-return': [ 'error', [ 'callback', 'next' ]],
  'capitalized-comments': [ 'error', 'always', {
    ignoreInlineComments: false, ignoreConsecutiveComments: true,
  }],
  'class-methods-use-this': [ 'error', { exceptMethods: []}],
  'comma-dangle': [ 'error', 'never' ],
  'comma-style': [ 'error', 'last' ],
  complexity: 'off',
  'computed-property-spacing': [ 'error', 'never', { enforceForClassMembers: true }],
  'consistent-return': 'off',
  'consistent-this': [ 'error', 'that' ],
  'constructor-super': [ 'error' ],
  curly: [ 'error', 'all' ],
  'default-case': [ 'error' ],
  'default-case-last': [ 'error' ],
  'dot-location': [ 'error', 'object' ],
  'eol-last': [ 'error', 'always' ],
  eqeqeq: [ 'error', 'always' ],
  'for-direction': [ 'error' ],
  'func-name-matching': 'off',
  'func-names': 'off',
  'func-style': [ 'error', 'expression' ],
  'function-call-argument-newline': [ 'error', 'consistent' ],
  'function-paren-newline': [ 'error', 'consistent' ],
  'generator-star-spacing': [ 'error', { before: true, after: true }],
  'getter-return': [ 'error', { allowImplicit: true }],
  'global-require': [ 'error' ],
  'grouped-accessor-pairs': [ 'error', 'getBeforeSet' ],
  'guard-for-in': [ 'error' ],

  'handle-callback-err': [ 'error', 'err' ],
  'id-denylist': 'off',
  'id-length': [ 'error', {
    min: 2,
    max: Number.POSITIVE_INFINITY,
    properties: 'always',
    exceptions: [ '_', 'i', 'j', 't', 'x', 'y', 'z' ],
  }],
  'id-match': 'off',
  'implicit-arrow-linebreak': 'off',
  'init-declarations': 'off',
  'jsx-quotes': [ 'error', 'prefer-single' ],
  'key-spacing': [ 'error', { beforeColon: false, afterColon: true, mode: 'strict' }],
  'linebreak-style': [ 'error', 'unix' ],
  'line-comment-position': [ 'error', { position: 'above' }],
  'lines-around-comment': [ 'error', {
    beforeBlockComment: false,
    afterBlockComment: false,
    beforeLineComment: true,
    afterLineComment: false,
    allowBlockStart: true,
    allowBlockEnd: true,
    allowObjectStart: true,
    allowObjectEnd: true,
    allowArrayStart: true,
    allowArrayEnd: true,
    allowClassStart: true,
    allowClassEnd: true,
    applyDefaultIgnorePatterns: true,
  }],
  'no-template-curly-in-string': [ 'error' ],
  'no-ternary': 'off',
  'no-this-before-super': [ 'error' ],
  'no-throw-literal': [ 'error' ],
  'no-trailing-spaces': [ 'error', { ignoreComments: false, skipBlankLines: false }],
  'no-undef': [ 'error', { typeof: true }],
  'no-undefined': 'off',
  'no-undef-init': [ 'error' ],
  'no-underscore-dangle': [ 'error', {
    allow: [ '__html' ],
    allowAfterThis: false,
    allowAfterThisConstructor: false,
    allowAfterSuper: false,
    allowFunctionParams: false,
    enforceInMethodNames: true,
  }],
  'no-unexpected-multiline': [ 'error' ],
  'no-unmodified-loop-condition': [ 'error' ],
  'no-unneeded-ternary': [ 'error', { defaultAssignment: false }],
  'no-unreachable': [ 'error' ],
  'no-unreachable-loop': [ 'error' ],
  'no-unsafe-finally': [ 'error' ],
  'no-unsafe-negation': [ 'error' ],
  'no-unsafe-optional-chaining': [ 'error', { disallowArithmeticOperators: true }],
  'no-unused-expressions': [ 'error', {
    allowShortCircuit: false,
    allowTernary: false,
    allowTaggedTemplates: false,
  }],
  'no-unused-labels': [ 'error' ],
  'no-useless-backreference': [ 'error' ],
  'no-useless-call': [ 'error' ],
  'no-useless-catch': [ 'error' ],
  'no-useless-computed-key': [ 'error', { enforceForClassMembers: true }],
  'no-useless-concat': [ 'error' ],
  'no-useless-escape': [ 'error' ],
  'no-useless-rename': [ 'error', {
    ignoreDestructuring: false,
    ignoreImport: false,
    ignoreExport: false,
  }],
  'no-useless-return': [ 'error' ],
  'no-var': [ 'error' ],
  'no-void': [ 'error' ],
  'no-warning-comments': 'off',
  'no-whitespace-before-property': [ 'error' ],
  'no-with': [ 'error' ],
  'object-curly-newline': [ 'error', {
    ObjectExpression: { consistent: true },
    ObjectPattern: { consistent: true },
    ImportDeclaration: { consistent: true },
    ExportDeclaration: { consistent: true },
  }],
  'object-property-newline': [ 'error', { allowAllPropertiesOnSameLine: true }],
  'object-shorthand': [ 'error', 'always', {
    avoidQuotes: false,
    ignoreConstructors: false,
    avoidExplicitReturnArrows: true,
  }],
  'one-var': 'off',
  'one-var-declaration-per-line': [ 'error', 'always' ],
  'operator-assignment': [ 'error', 'always' ],
  'operator-linebreak': [ 'error', 'after' ],
  'padded-blocks': [ 'error', 'never', { allowSingleLineBlocks: true }],
  'padding-line-between-statements': [ 'error',
    { blankLine: 'always', prev: '*', next: 'return' },
    { blankLine: 'always', prev: [ 'const', 'let', 'var' ], next: '*' },
    { blankLine: 'any', prev: [ 'const', 'let', 'var' ], next: [ 'const', 'let', 'var' ]},
    { blankLine: 'always', prev: 'directive', next: '*' },
    { blankLine: 'any', prev: 'directive', next: 'directive' },
  ],
  'prefer-arrow-callback': [ 'error', {
    allowNamedFunctions: false,
    allowUnboundThis: true,
  }],
  'prefer-const': [ 'error', {
    destructuring: 'any',
    ignoreReadBeforeAssign: true,
  }],

  // Arrays are disabled here because of the unicorn/noUnreadableArrayDestructuring
  // rule.
  'prefer-destructuring': [ 'error',
    { array: false, object: true },
    { enforceForRenamedProperties: false },
  ],
  'prefer-exponentiation-operator': [ 'error' ],
  'prefer-named-capture-group': [ 'error' ],
  'prefer-numeric-literals': [ 'error' ],
  'prefer-object-spread': [ 'error' ],
  'prefer-promise-reject-errors': [ 'error', { allowEmptyReject: false }],
  'prefer-regex-literals': [ 'error' ],
  'prefer-rest-params': [ 'error' ],
  'prefer-spread': [ 'error' ],
  'prefer-template': [ 'error' ],
  'quote-props': [ 'error', 'as-needed', {
    keywords: false, unnecessary: true, numbers: false,
  }],
  quotes: [ 'error', 'single', { avoidEscape: false, allowTemplateLiterals: true }],
  radix: [ 'error', 'always' ],
  'require-atomic-updates': 'off',
  'require-unicode-regexp': [ 'error' ],
  'require-yield': [ 'error' ],
  'rest-spread-spacing': [ 'error', 'never' ],
  'semi-spacing': [ 'error', { before: false, after: true }],
  'semi-style': [ 'error', 'last' ],
  'sort-imports': [ 'error', {
    ignoreCase: true,
    ignoreDeclarationSort: false,
    ignoreMemberSort: false,
    memberSyntaxSortOrder: [
      'single',
      'multiple',
      'all',
      'none',
    ],
  }],
  'sort-keys': 'off',
  'sort-vars': [ 'error', { ignoreCase: true }],
  'space-before-blocks': [ 'error', 'always' ],
  'spaced-comment': [ 'error', 'always', { exceptions: [ 'error' ], markers: []}],
  'space-in-parens': [ 'error', 'never' ],
  'space-unary-ops': [ 'error', { words: true, nonwords: false }],
  strict: [ 'error', 'global' ],
  'switch-colon-spacing': [ 'error', { after: true, before: false }],
  'symbol-description': [ 'error' ],
  'template-curly-spacing': [ 'error', 'never' ],
  'template-tag-spacing': [ 'error', 'never' ],
  'unicode-bom': [ 'error', 'never' ],
  'use-isnan': [ 'error', { enforceForSwitchCase: true }],
  'valid-typeof': [ 'error', { requireStringLiterals: true }],
  'vars-on-top': [ 'error' ],
  'wrap-iife': [ 'error', 'inside', { functionPrototypeMethods: true }],
  'wrap-regex': 'off',
  'yield-star-spacing': [ 'error', { before: true, after: true }],
  yoda: [ 'error', 'never', {
    exceptRange: true, onlyEquality: false,
  }],
};
