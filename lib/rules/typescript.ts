import type { Linter } from 'eslint';
import { js as disabled, ts as shared } from './shared.js';

export const rules: Linter.RulesRecord = {
  ...shared,
  ...Object.fromEntries(Object.keys(disabled).map(rule => [ rule, 'off' ])),

  // This rule is already enforced via the type system and produces false-positives.
  'unicorn/require-post-message-target-origin': 'off',

  '@typescript-eslint/adjacent-overload-signatures': [ 'error' ],
  '@typescript-eslint/array-type': [ 'error', { default: 'array' }],
  '@typescript-eslint/await-thenable': [ 'error' ],
  '@typescript-eslint/ban-ts-comment': [ 'error', {
    'ts-ignore': true,
    'ts-nocheck': true,
    'ts-check': false,
  }],
  '@typescript-eslint/ban-tslint-comment': [ 'error' ],
  '@typescript-eslint/ban-types': [ 'error',
    {
      types: {
        object: false,
      },
    },
  ],
  '@typescript-eslint/class-literal-property-style': [ 'error', 'fields' ],
  '@typescript-eslint/consistent-indexed-object-style': [ 'error', 'record' ],
  '@typescript-eslint/consistent-type-assertions': [ 'error', {
    assertionStyle: 'as',
    objectLiteralTypeAssertions: 'allow',
  }],
  '@typescript-eslint/consistent-type-definitions': [ 'error', 'interface' ],
  '@typescript-eslint/consistent-type-imports': [ 'error', {
    prefer: 'no-type-imports',
    disallowTypeAnnotations: true,
  }],
  '@typescript-eslint/explicit-function-return-type': [ 'error', {
    allowExpressions: false,
    allowTypedFunctionExpressions: true,
    allowHigherOrderFunctions: false,
  }],
  '@typescript-eslint/explicit-member-accessibility': [ 'error', {
    accessibility: 'explicit',
  }],
  '@typescript-eslint/explicit-module-boundary-types': 'off',
  '@typescript-eslint/init-declarations': 'off',
  '@typescript-eslint/member-delimiter-style': [ 'error', {
    multiline: { delimiter: 'semi', requireLast: true },
    singleline: { delimiter: 'semi', requireLast: false },
  }],
  '@typescript-eslint/member-ordering': 'off',
  '@typescript-eslint/method-signature-style': [ 'error', 'property' ],
  '@typescript-eslint/no-base-to-string': [ 'error' ],
  '@typescript-eslint/no-confusing-non-null-assertion': [ 'error' ],
  '@typescript-eslint/no-dynamic-delete': [ 'error' ],
  '@typescript-eslint/no-empty-interface': [ 'error', {
    allowSingleExtends: false,
  }],
  '@typescript-eslint/no-explicit-any': 'off',
  '@typescript-eslint/no-extraneous-class': [ 'error', {
    allowConstructorOnly: false,
    allowEmpty: false,
    allowStaticOnly: false,
  }],
  '@typescript-eslint/no-floating-promises': [ 'error', {
    ignoreVoid: false,
  }],
  '@typescript-eslint/no-for-in-array': [ 'error' ],
  '@typescript-eslint/no-implied-eval': [ 'error' ],
  '@typescript-eslint/no-inferrable-types': [ 'error', {
    ignoreParameters: false,
    ignoreProperties: false,
  }],
  '@typescript-eslint/no-invalid-this': 'off',
  '@typescript-eslint/no-invalid-void-type': 'off',
  '@typescript-eslint/no-misused-new': [ 'error' ],
  '@typescript-eslint/no-misused-promises': [ 'error', {
    checksConditionals: true,
    checksVoidReturn: false,
  }],
  '@typescript-eslint/no-namespace': [ 'error', {
    allowDeclarations: false,
    allowDefinitionFiles: true,
  }],
  '@typescript-eslint/no-non-null-asserted-optional-chain': [ 'error' ],
  '@typescript-eslint/no-non-null-assertion': 'off',
  '@typescript-eslint/no-parameter-properties': 'off',
  '@typescript-eslint/no-require-imports': [ 'error' ],
  '@typescript-eslint/no-this-alias': [ 'error', {
    allowDestructuring: false,
    allowedNames: [],
  }],
  '@typescript-eslint/no-throw-literal': [ 'error' ],
  '@typescript-eslint/no-type-alias': 'off',
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': [ 'error' ],
  '@typescript-eslint/no-unnecessary-condition': [ 'error', {
    allowConstantLoopConditions: false,

    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
  }],
  '@typescript-eslint/no-unnecessary-qualifier': [ 'error' ],
  '@typescript-eslint/no-unnecessary-type-arguments': [ 'error' ],
  '@typescript-eslint/no-unnecessary-type-assertion': [ 'error', {
    typesToIgnore: [],
  }],
  '@typescript-eslint/no-unnecessary-type-constraint': [ 'error' ],
  '@typescript-eslint/no-unsafe-argument': 'off',
  '@typescript-eslint/no-unsafe-assignment': 'off',
  '@typescript-eslint/no-unsafe-call': 'off',
  '@typescript-eslint/no-unsafe-member-access': 'off',
  '@typescript-eslint/no-unsafe-return': 'off',
  '@typescript-eslint/no-var-requires': [ 'error' ],
  '@typescript-eslint/non-nullable-type-assertion-style': [ 'error' ],
  '@typescript-eslint/prefer-as-const': [ 'error' ],
  '@typescript-eslint/prefer-enum-initializers': 'off',
  '@typescript-eslint/prefer-for-of': [ 'error' ],
  '@typescript-eslint/prefer-function-type': [ 'error' ],
  '@typescript-eslint/prefer-includes': [ 'error' ],
  '@typescript-eslint/prefer-literal-enum-member': [ 'error' ],
  '@typescript-eslint/prefer-namespace-keyword': 'off',
  '@typescript-eslint/prefer-nullish-coalescing': [ 'error', {
    ignoreConditionalTests: false,
    ignoreMixedLogicalExpressions: false,
  }],
  '@typescript-eslint/prefer-readonly': [ 'error', { onlyInlineLambdas: false }],
  '@typescript-eslint/prefer-readonly-parameter-types': 'off',
  '@typescript-eslint/prefer-reduce-type-parameter': [ 'error' ],
  '@typescript-eslint/prefer-regexp-exec': [ 'error' ],
  '@typescript-eslint/prefer-string-starts-ends-with': [ 'error' ],
  '@typescript-eslint/prefer-ts-expect-error': [ 'error' ],
  '@typescript-eslint/promise-function-async': [ 'error', {
    allowAny: true,
    allowedPromiseNames: [ 'error' ],
    checkArrowFunctions: true,
    checkFunctionDeclarations: true,
    checkFunctionExpressions: true,
    checkMethodDeclarations: true,
  }],
  '@typescript-eslint/require-array-sort-compare': [ 'error' ],
  '@typescript-eslint/restrict-plus-operands': [ 'error' ],
  '@typescript-eslint/restrict-template-expressions': 'off',
  '@typescript-eslint/strict-boolean-expressions': 'off',
  '@typescript-eslint/switch-exhaustiveness-check': [ 'error' ],
  '@typescript-eslint/triple-slash-reference': [ 'error' ],
  '@typescript-eslint/type-annotation-spacing': [ 'error', {
    before: false,
    after: true,
    overrides: { arrow: { before: true, after: true }},
  }],
  '@typescript-eslint/typedef': 'off',
  '@typescript-eslint/unbound-method': [ 'error', { ignoreStatic: true }],
  '@typescript-eslint/unified-signatures': [ 'error' ],
};
